// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.3
// source: secretkeeper.proto

package secretkeeper

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SecretKeeperClient is the client API for SecretKeeper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecretKeeperClient interface {
	AddKey(ctx context.Context, in *AddKeyRequest, opts ...grpc.CallOption) (*AddKeyResponse, error)
	GetKey(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (*GetKeyResponse, error)
	UpdateKey(ctx context.Context, in *UpdateKeyRequest, opts ...grpc.CallOption) (*UpdateKeyResponse, error)
}

type secretKeeperClient struct {
	cc grpc.ClientConnInterface
}

func NewSecretKeeperClient(cc grpc.ClientConnInterface) SecretKeeperClient {
	return &secretKeeperClient{cc}
}

func (c *secretKeeperClient) AddKey(ctx context.Context, in *AddKeyRequest, opts ...grpc.CallOption) (*AddKeyResponse, error) {
	out := new(AddKeyResponse)
	err := c.cc.Invoke(ctx, "/secretkeeper.SecretKeeper/AddKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretKeeperClient) GetKey(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (*GetKeyResponse, error) {
	out := new(GetKeyResponse)
	err := c.cc.Invoke(ctx, "/secretkeeper.SecretKeeper/GetKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretKeeperClient) UpdateKey(ctx context.Context, in *UpdateKeyRequest, opts ...grpc.CallOption) (*UpdateKeyResponse, error) {
	out := new(UpdateKeyResponse)
	err := c.cc.Invoke(ctx, "/secretkeeper.SecretKeeper/UpdateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecretKeeperServer is the server API for SecretKeeper service.
// All implementations must embed UnimplementedSecretKeeperServer
// for forward compatibility
type SecretKeeperServer interface {
	AddKey(context.Context, *AddKeyRequest) (*AddKeyResponse, error)
	GetKey(context.Context, *GetKeyRequest) (*GetKeyResponse, error)
	UpdateKey(context.Context, *UpdateKeyRequest) (*UpdateKeyResponse, error)
	mustEmbedUnimplementedSecretKeeperServer()
}

// UnimplementedSecretKeeperServer must be embedded to have forward compatible implementations.
type UnimplementedSecretKeeperServer struct {
}

func (UnimplementedSecretKeeperServer) AddKey(context.Context, *AddKeyRequest) (*AddKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddKey not implemented")
}
func (UnimplementedSecretKeeperServer) GetKey(context.Context, *GetKeyRequest) (*GetKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKey not implemented")
}
func (UnimplementedSecretKeeperServer) UpdateKey(context.Context, *UpdateKeyRequest) (*UpdateKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKey not implemented")
}
func (UnimplementedSecretKeeperServer) mustEmbedUnimplementedSecretKeeperServer() {}

// UnsafeSecretKeeperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecretKeeperServer will
// result in compilation errors.
type UnsafeSecretKeeperServer interface {
	mustEmbedUnimplementedSecretKeeperServer()
}

func RegisterSecretKeeperServer(s grpc.ServiceRegistrar, srv SecretKeeperServer) {
	s.RegisterService(&SecretKeeper_ServiceDesc, srv)
}

func _SecretKeeper_AddKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretKeeperServer).AddKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/secretkeeper.SecretKeeper/AddKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretKeeperServer).AddKey(ctx, req.(*AddKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretKeeper_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretKeeperServer).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/secretkeeper.SecretKeeper/GetKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretKeeperServer).GetKey(ctx, req.(*GetKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretKeeper_UpdateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretKeeperServer).UpdateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/secretkeeper.SecretKeeper/UpdateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretKeeperServer).UpdateKey(ctx, req.(*UpdateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecretKeeper_ServiceDesc is the grpc.ServiceDesc for SecretKeeper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecretKeeper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "secretkeeper.SecretKeeper",
	HandlerType: (*SecretKeeperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddKey",
			Handler:    _SecretKeeper_AddKey_Handler,
		},
		{
			MethodName: "GetKey",
			Handler:    _SecretKeeper_GetKey_Handler,
		},
		{
			MethodName: "UpdateKey",
			Handler:    _SecretKeeper_UpdateKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "secretkeeper.proto",
}
